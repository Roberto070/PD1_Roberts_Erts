
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import classes.*;
import java.nio.channels.FileChannel;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Roberts Erts 
 */
public class mainWindow extends javax.swing.JFrame {
    boolean work1 = false;
    boolean work2 = false;
    boolean test1 = false;
    boolean test2 = false;
    
    String name = "";
    String surname = "";
    String login = "";
    String password = "";
    String type = "";
    User user = new Student(name, surname, login, password);
    
    int questionCount = 0;
    String text = "";
    String[] answer = {"","",""};
    int correctAnswer = -1;
    Question question = new Question(text, answer, correctAnswer);
    
    int rightAnswersCount = 0;
    int totalQuestions = 20;
    
    private List<Question> questions = new ArrayList<>();
    DistanceExamenator test = new DistanceExamenator(work1, name, (ArrayList) questions);
    
    Result result = new Result(test, totalQuestions, rightAnswersCount);
    String selectedAnswer = null;
    int percent = 0;
    int avgPercent = 0;
    int average = 0;
    int grade = 0;
    
    String[] selectedAnswers = new String[20];
    String[] correctAnswers = new String[20];
    String[] results = new String[20]; // "Pareizi" vai "Nepareizi"
    /**
     * Creates new form mainWindow
     */
    public mainWindow() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        registration = new javax.swing.JDialog();
        registrationPanel = new javax.swing.JPanel();
        registrationLabel1 = new javax.swing.JLabel();
        registrationLabel2 = new javax.swing.JLabel();
        registrationLabel3 = new javax.swing.JLabel();
        registrationLabel4 = new javax.swing.JLabel();
        registrationLabel5 = new javax.swing.JLabel();
        registrationLabel6 = new javax.swing.JLabel();
        registrationTextField1 = new javax.swing.JTextField();
        registrationTextField2 = new javax.swing.JTextField();
        registrationTextField3 = new javax.swing.JTextField();
        registrationTextField4 = new javax.swing.JTextField();
        registrationTextField5 = new javax.swing.JTextField();
        registrationRadioButton1 = new javax.swing.JRadioButton();
        registrationRadioButton2 = new javax.swing.JRadioButton();
        registrationLabel7 = new javax.swing.JLabel();
        registrationButton1 = new javax.swing.JButton();
        registrationButton2 = new javax.swing.JButton();
        registrationLabel8 = new javax.swing.JLabel();
        registrationBackground = new javax.swing.JLabel();
        registrationMenuBar = new javax.swing.JMenuBar();
        exitRegistrationMenu = new javax.swing.JMenu();
        helpRegistrationMenu = new javax.swing.JMenu();
        registrationButtonGroup = new javax.swing.ButtonGroup();
        studentTest = new javax.swing.JDialog();
        studentTestPanel = new javax.swing.JPanel();
        studentTestLabel1 = new javax.swing.JLabel();
        studentStartTestButton1 = new javax.swing.JButton();
        studentExitButton = new javax.swing.JButton();
        studentTestLabel2 = new javax.swing.JLabel();
        studentStartTestButton2 = new javax.swing.JButton();
        studentTestBackground = new javax.swing.JLabel();
        studentTestMenuBar = new javax.swing.JMenuBar();
        exitStudentTestMenu = new javax.swing.JMenu();
        teacherTest = new javax.swing.JDialog();
        teacherTestPanel1 = new javax.swing.JPanel();
        teacherTestLabel1 = new javax.swing.JLabel();
        teacherStartTestButton1 = new javax.swing.JButton();
        teacherExtButton = new javax.swing.JButton();
        teacherTestStatusButton1 = new javax.swing.JButton();
        teacherTestLabel2 = new javax.swing.JLabel();
        teacherStartTestButton2 = new javax.swing.JButton();
        teacherTestStatusButton2 = new javax.swing.JButton();
        teacherTestBackground = new javax.swing.JLabel();
        teacherTestMenuBar = new javax.swing.JMenuBar();
        exitTeacherTestMenu = new javax.swing.JMenu();
        testQuestion = new javax.swing.JDialog();
        questionPanel2 = new javax.swing.JPanel();
        qLabel = new javax.swing.JLabel();
        questionEndButton = new javax.swing.JButton();
        question1 = new javax.swing.JButton();
        question2 = new javax.swing.JButton();
        question3 = new javax.swing.JButton();
        question4 = new javax.swing.JButton();
        question5 = new javax.swing.JButton();
        question6 = new javax.swing.JButton();
        question7 = new javax.swing.JButton();
        question8 = new javax.swing.JButton();
        question9 = new javax.swing.JButton();
        question10 = new javax.swing.JButton();
        question11 = new javax.swing.JButton();
        question12 = new javax.swing.JButton();
        question13 = new javax.swing.JButton();
        question14 = new javax.swing.JButton();
        question15 = new javax.swing.JButton();
        question16 = new javax.swing.JButton();
        question17 = new javax.swing.JButton();
        question18 = new javax.swing.JButton();
        question19 = new javax.swing.JButton();
        question20 = new javax.swing.JButton();
        questionPanel1 = new javax.swing.JPanel();
        questionLabel = new javax.swing.JLabel();
        questionRadioButton1 = new javax.swing.JRadioButton();
        questionRadioButton2 = new javax.swing.JRadioButton();
        questionRadioButton3 = new javax.swing.JRadioButton();
        nextQuestionButton = new javax.swing.JButton();
        testBackground = new javax.swing.JLabel();
        testMenuBar = new javax.swing.JMenuBar();
        exitTestMenu = new javax.swing.JMenu();
        questionButtonGroup = new javax.swing.ButtonGroup();
        testResult = new javax.swing.JDialog();
        resultPanel = new javax.swing.JPanel();
        resultLabel1 = new javax.swing.JLabel();
        resultLabel2 = new javax.swing.JLabel();
        percentageLabel1 = new javax.swing.JLabel();
        markLabel1 = new javax.swing.JLabel();
        resultLabel3 = new javax.swing.JLabel();
        percentageLabel2 = new javax.swing.JLabel();
        markLabel2 = new javax.swing.JLabel();
        seeAnswerButton = new javax.swing.JButton();
        resultEndButton = new javax.swing.JButton();
        resultComentLabel = new javax.swing.JLabel();
        resultBackground = new javax.swing.JLabel();
        resultMenuBar = new javax.swing.JMenuBar();
        exitResultMenu = new javax.swing.JMenu();
        testAnswer = new javax.swing.JDialog();
        testAnswerPanel = new javax.swing.JPanel();
        testAnswerLabel = new javax.swing.JLabel();
        testAnswerButton = new javax.swing.JButton();
        testAnswerScrollPane = new javax.swing.JScrollPane();
        testAnswerOutput = new javax.swing.JTextArea();
        testAnswerBackground = new javax.swing.JLabel();
        helpRegistration = new javax.swing.JDialog();
        helpRegistartionPanel1 = new javax.swing.JPanel();
        helpRegistartionLabel1 = new javax.swing.JLabel();
        helpRegistrationPanel2 = new javax.swing.JPanel();
        helpRegistrationLabel1 = new javax.swing.JLabel();
        helpRegistrationLabel2 = new javax.swing.JLabel();
        helpRegistrationLabel3 = new javax.swing.JLabel();
        helpRegistrationLabel4 = new javax.swing.JLabel();
        helpRegistrationLabel5 = new javax.swing.JLabel();
        helpRegistrationLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        helpRegistrationButton = new javax.swing.JButton();
        helpRegistartionBackground = new javax.swing.JLabel();
        helpLogin = new javax.swing.JDialog();
        helpLoginPanel1 = new javax.swing.JPanel();
        helpLoginLabel1 = new javax.swing.JLabel();
        helpLoginPanel2 = new javax.swing.JPanel();
        helpLoginLabel2 = new javax.swing.JLabel();
        helpLoginLabel3 = new javax.swing.JLabel();
        helpLoginLabel4 = new javax.swing.JLabel();
        helpLoginLabel5 = new javax.swing.JLabel();
        helpLoginButton = new javax.swing.JButton();
        helpRegistartionBackground1 = new javax.swing.JLabel();
        helpRegistration2 = new javax.swing.JDialog();
        helpRegistartionPanel3 = new javax.swing.JPanel();
        helpRegistartionLabel3 = new javax.swing.JLabel();
        helpRegistrationPanel4 = new javax.swing.JPanel();
        helpRegistrationLabel13 = new javax.swing.JLabel();
        helpRegistrationLabel14 = new javax.swing.JLabel();
        helpRegistrationLabel15 = new javax.swing.JLabel();
        helpRegistrationLabel16 = new javax.swing.JLabel();
        helpRegistrationLabel17 = new javax.swing.JLabel();
        helpRegistrationLabel18 = new javax.swing.JLabel();
        helpRegistartionBackground2 = new javax.swing.JLabel();
        mainPanel1 = new javax.swing.JPanel();
        mainPanel2 = new javax.swing.JPanel();
        mainLabel2_1 = new javax.swing.JLabel();
        mainLabel2_2 = new javax.swing.JLabel();
        mainLabel1_1 = new javax.swing.JLabel();
        mainLabel1_2 = new javax.swing.JLabel();
        mainLabel1_3 = new javax.swing.JLabel();
        mainTextField1 = new javax.swing.JTextField();
        mainTextField2 = new javax.swing.JTextField();
        mainButton1 = new javax.swing.JButton();
        mainLabel1_4 = new javax.swing.JLabel();
        mainButton2 = new javax.swing.JButton();
        mainBackground = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        exitMainMenu = new javax.swing.JMenu();
        helpMainMenu = new javax.swing.JMenu();

        registration.setTitle("Test");
        registration.setMinimumSize(new java.awt.Dimension(800, 630));
        registration.setModal(true);
        registration.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        registrationPanel.setBackground(new java.awt.Color(255, 255, 255));
        registrationPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        registrationLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        registrationLabel1.setText("Reģistrēšana ");

        registrationLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrationLabel2.setText("Vards : ");

        registrationLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrationLabel3.setText("Uzvards : ");

        registrationLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrationLabel4.setText("Lietotajvards : ");

        registrationLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrationLabel5.setText("Parole : ");

        registrationLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrationLabel6.setText("Parole (atkartoti) :");

        registrationTextField1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        registrationTextField2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        registrationTextField3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        registrationTextField4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        registrationTextField5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        registrationButtonGroup.add(registrationRadioButton1);
        registrationRadioButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrationRadioButton1.setText("Skolēns");

        registrationButtonGroup.add(registrationRadioButton2);
        registrationRadioButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrationRadioButton2.setText("Skolotājs");

        registrationLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrationLabel7.setText("Es esmu :");

        registrationButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrationButton1.setText("Reģistreties");
        registrationButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrationButton1ActionPerformed(evt);
            }
        });

        registrationButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        registrationButton2.setText("Ielogoties");
        registrationButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrationButton2ActionPerformed(evt);
            }
        });

        registrationLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        registrationLabel8.setText("Jau ir konts? Tad ielogoties :");

        javax.swing.GroupLayout registrationPanelLayout = new javax.swing.GroupLayout(registrationPanel);
        registrationPanel.setLayout(registrationPanelLayout);
        registrationPanelLayout.setHorizontalGroup(
            registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registrationPanelLayout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrationLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(registrationLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(registrationLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(registrationLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(registrationLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(registrationLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registrationButton1)
                    .addGroup(registrationPanelLayout.createSequentialGroup()
                        .addComponent(registrationRadioButton1)
                        .addGap(18, 18, 18)
                        .addComponent(registrationRadioButton2))
                    .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(registrationTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addComponent(registrationTextField1)
                        .addComponent(registrationTextField2)
                        .addComponent(registrationTextField3)
                        .addComponent(registrationTextField4)))
                .addGap(50, 50, 50))
            .addGroup(registrationPanelLayout.createSequentialGroup()
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(registrationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(registrationLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registrationButton2))
                    .addGroup(registrationPanelLayout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(registrationLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        registrationPanelLayout.setVerticalGroup(
            registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registrationPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(registrationLabel1)
                .addGap(28, 28, 28)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrationTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registrationLabel2))
                .addGap(18, 18, 18)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrationLabel3)
                    .addComponent(registrationTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrationLabel4)
                    .addComponent(registrationTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrationLabel5)
                    .addComponent(registrationTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrationTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registrationLabel6))
                .addGap(18, 18, 18)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrationRadioButton1)
                    .addComponent(registrationRadioButton2)
                    .addComponent(registrationLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registrationButton1)
                .addGap(18, 18, 18)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrationButton2)
                    .addComponent(registrationLabel8))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        registration.getContentPane().add(registrationPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, -1, -1));

        registrationBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background2.png"))); // NOI18N
        registration.getContentPane().add(registrationBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        exitRegistrationMenu.setText("Exit");
        exitRegistrationMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitRegistrationMenuMouseClicked(evt);
            }
        });
        registrationMenuBar.add(exitRegistrationMenu);

        helpRegistrationMenu.setText("Help");
        helpRegistrationMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpRegistrationMenuMouseClicked(evt);
            }
        });
        registrationMenuBar.add(helpRegistrationMenu);

        registration.setJMenuBar(registrationMenuBar);

        studentTest.setTitle("Test");
        studentTest.setMinimumSize(new java.awt.Dimension(800, 630));
        studentTest.setModal(true);
        studentTest.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        studentTestPanel.setBackground(new java.awt.Color(255, 255, 255));
        studentTestPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        studentTestLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        studentTestLabel1.setText("Tests “Latvija”");

        studentStartTestButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        studentStartTestButton1.setText("Sakt testu");
        studentStartTestButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentStartTestButton1ActionPerformed(evt);
            }
        });

        studentExitButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        studentExitButton.setText("Atteikties no konta");
        studentExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentExitButtonActionPerformed(evt);
            }
        });

        studentTestLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        studentTestLabel2.setText("Tests “Eiropa”");

        studentStartTestButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        studentStartTestButton2.setText("Sakt testu");
        studentStartTestButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentStartTestButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout studentTestPanelLayout = new javax.swing.GroupLayout(studentTestPanel);
        studentTestPanel.setLayout(studentTestPanelLayout);
        studentTestPanelLayout.setHorizontalGroup(
            studentTestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentTestPanelLayout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(studentStartTestButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(studentStartTestButton2)
                .addGap(104, 104, 104))
            .addGroup(studentTestPanelLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(studentTestLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 193, Short.MAX_VALUE)
                .addComponent(studentTestLabel2)
                .addGap(79, 79, 79))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentTestPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(studentExitButton)
                .addGap(246, 246, 246))
        );
        studentTestPanelLayout.setVerticalGroup(
            studentTestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentTestPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(studentTestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentTestLabel1)
                    .addComponent(studentTestLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(studentTestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentStartTestButton1)
                    .addComponent(studentStartTestButton2))
                .addGap(18, 18, 18)
                .addComponent(studentExitButton)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        studentTest.getContentPane().add(studentTestPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, -1, -1));

        studentTestBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background2.png"))); // NOI18N
        studentTest.getContentPane().add(studentTestBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        exitStudentTestMenu.setText("Exit");
        exitStudentTestMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitStudentTestMenuMouseClicked(evt);
            }
        });
        studentTestMenuBar.add(exitStudentTestMenu);

        studentTest.setJMenuBar(studentTestMenuBar);

        teacherTest.setTitle("Test");
        teacherTest.setMinimumSize(new java.awt.Dimension(800, 630));
        teacherTest.setModal(true);
        teacherTest.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        teacherTestPanel1.setBackground(new java.awt.Color(255, 255, 255));
        teacherTestPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        teacherTestLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        teacherTestLabel1.setText("Tests “Latvija”");

        teacherStartTestButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        teacherStartTestButton1.setText("Sakt testu");
        teacherStartTestButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacherStartTestButton1ActionPerformed(evt);
            }
        });

        teacherExtButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        teacherExtButton.setText("Atteikties no konta");
        teacherExtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacherExtButtonActionPerformed(evt);
            }
        });

        teacherTestStatusButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        teacherTestStatusButton1.setText("Testa statuss");
        teacherTestStatusButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacherTestStatusButton1ActionPerformed(evt);
            }
        });

        teacherTestLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        teacherTestLabel2.setText("Tests “Eiropa”");
        teacherTestLabel2.setToolTipText("");

        teacherStartTestButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        teacherStartTestButton2.setText("Sakt testu");
        teacherStartTestButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacherStartTestButton2ActionPerformed(evt);
            }
        });

        teacherTestStatusButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        teacherTestStatusButton2.setText("Testa statuss");
        teacherTestStatusButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacherTestStatusButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout teacherTestPanel1Layout = new javax.swing.GroupLayout(teacherTestPanel1);
        teacherTestPanel1.setLayout(teacherTestPanel1Layout);
        teacherTestPanel1Layout.setHorizontalGroup(
            teacherTestPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherTestPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(teacherExtButton)
                .addGap(229, 229, 229))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherTestPanel1Layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(teacherStartTestButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(teacherStartTestButton2)
                .addGap(99, 99, 99))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherTestPanel1Layout.createSequentialGroup()
                .addGroup(teacherTestPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teacherTestPanel1Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(teacherTestLabel1))
                    .addGroup(teacherTestPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(teacherTestStatusButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addGroup(teacherTestPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherTestPanel1Layout.createSequentialGroup()
                        .addComponent(teacherTestLabel2)
                        .addGap(77, 77, 77))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherTestPanel1Layout.createSequentialGroup()
                        .addComponent(teacherTestStatusButton2)
                        .addGap(90, 90, 90))))
        );
        teacherTestPanel1Layout.setVerticalGroup(
            teacherTestPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherTestPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(teacherTestPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teacherTestLabel1)
                    .addComponent(teacherTestLabel2))
                .addGap(18, 18, 18)
                .addGroup(teacherTestPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teacherStartTestButton1)
                    .addComponent(teacherStartTestButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teacherTestPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teacherTestStatusButton1)
                    .addComponent(teacherTestStatusButton2))
                .addGap(18, 18, 18)
                .addComponent(teacherExtButton)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        teacherTest.getContentPane().add(teacherTestPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 180, -1, -1));

        teacherTestBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background2.png"))); // NOI18N
        teacherTest.getContentPane().add(teacherTestBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        exitTeacherTestMenu.setText("Exit");
        exitTeacherTestMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitTeacherTestMenuMouseClicked(evt);
            }
        });
        teacherTestMenuBar.add(exitTeacherTestMenu);

        teacherTest.setJMenuBar(teacherTestMenuBar);

        testQuestion.setTitle("Test");
        testQuestion.setMinimumSize(new java.awt.Dimension(800, 630));
        testQuestion.setModal(true);
        testQuestion.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        questionPanel2.setBackground(new java.awt.Color(255, 255, 255));
        questionPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        qLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        qLabel.setText("Jautajumi :");

        questionEndButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        questionEndButton.setText("Pabeigt darbu");
        questionEndButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionEndButtonActionPerformed(evt);
            }
        });

        question1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question1.setText("1");
        question1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question1ActionPerformed(evt);
            }
        });

        question2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question2.setText("2");
        question2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question2ActionPerformed(evt);
            }
        });

        question3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question3.setText("3");
        question3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question3ActionPerformed(evt);
            }
        });

        question4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question4.setText("4");
        question4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question4ActionPerformed(evt);
            }
        });

        question5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question5.setText("5");
        question5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question5ActionPerformed(evt);
            }
        });

        question6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question6.setText("6");
        question6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question6ActionPerformed(evt);
            }
        });

        question7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question7.setText("7");
        question7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question7ActionPerformed(evt);
            }
        });

        question8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question8.setText("8");
        question8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question8ActionPerformed(evt);
            }
        });

        question9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question9.setText("9");
        question9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question9ActionPerformed(evt);
            }
        });

        question10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question10.setText("10");
        question10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question10ActionPerformed(evt);
            }
        });

        question11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question11.setText("11");
        question11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question11ActionPerformed(evt);
            }
        });

        question12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question12.setText("12");
        question12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question12ActionPerformed(evt);
            }
        });

        question13.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question13.setText("13");
        question13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question13ActionPerformed(evt);
            }
        });

        question14.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question14.setText("14");
        question14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question14ActionPerformed(evt);
            }
        });

        question15.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question15.setText("15");
        question15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question15ActionPerformed(evt);
            }
        });

        question16.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question16.setText("16");
        question16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question16ActionPerformed(evt);
            }
        });

        question17.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question17.setText("17");
        question17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question17ActionPerformed(evt);
            }
        });

        question18.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question18.setText("18");
        question18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question18ActionPerformed(evt);
            }
        });

        question19.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question19.setText("19");
        question19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question19ActionPerformed(evt);
            }
        });

        question20.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question20.setText("20");
        question20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question20ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout questionPanel2Layout = new javax.swing.GroupLayout(questionPanel2);
        questionPanel2.setLayout(questionPanel2Layout);
        questionPanel2Layout.setHorizontalGroup(
            questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanel2Layout.createSequentialGroup()
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(questionPanel2Layout.createSequentialGroup()
                        .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(questionPanel2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(questionPanel2Layout.createSequentialGroup()
                                        .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(question19, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question13, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question11, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question15, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question17, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(6, 6, 6)
                                        .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(question16, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question12, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question14, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question18, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question20, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(questionPanel2Layout.createSequentialGroup()
                                        .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(question9, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(question8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(question10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(questionPanel2Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(qLabel))
                            .addGroup(questionPanel2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(question1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(question2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(questionPanel2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(questionPanel2Layout.createSequentialGroup()
                                        .addComponent(question5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(questionPanel2Layout.createSequentialGroup()
                                        .addComponent(question3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(question4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, questionPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(questionEndButton)))
                .addContainerGap())
        );
        questionPanel2Layout.setVerticalGroup(
            questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(qLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question1)
                    .addComponent(question2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question3)
                    .addComponent(question4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question6)
                    .addComponent(question5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question7)
                    .addComponent(question8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question10)
                    .addComponent(question9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question11)
                    .addComponent(question12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question14)
                    .addComponent(question13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question15)
                    .addComponent(question16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question18)
                    .addComponent(question17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question19)
                    .addComponent(question20))
                .addGap(18, 18, 18)
                .addComponent(questionEndButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        testQuestion.getContentPane().add(questionPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 20, -1, -1));

        questionPanel1.setBackground(new java.awt.Color(255, 255, 255));
        questionPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        questionLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        questionLabel.setText("1. Jautajums “Jautajuma teksts”");

        questionButtonGroup.add(questionRadioButton1);
        questionRadioButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        questionRadioButton1.setText("1. atbilde");

        questionButtonGroup.add(questionRadioButton2);
        questionRadioButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        questionRadioButton2.setText("2. atbilde");

        questionButtonGroup.add(questionRadioButton3);
        questionRadioButton3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        questionRadioButton3.setText("3. atbilde");

        nextQuestionButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        nextQuestionButton.setText("Talak");
        nextQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQuestionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout questionPanel1Layout = new javax.swing.GroupLayout(questionPanel1);
        questionPanel1.setLayout(questionPanel1Layout);
        questionPanel1Layout.setHorizontalGroup(
            questionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanel1Layout.createSequentialGroup()
                .addGroup(questionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(questionPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(questionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(questionRadioButton3)
                            .addComponent(questionRadioButton1)
                            .addComponent(questionRadioButton2)
                            .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(questionPanel1Layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(nextQuestionButton)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        questionPanel1Layout.setVerticalGroup(
            questionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(questionLabel)
                .addGap(50, 50, 50)
                .addComponent(questionRadioButton1)
                .addGap(30, 30, 30)
                .addComponent(questionRadioButton2)
                .addGap(30, 30, 30)
                .addComponent(questionRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(nextQuestionButton)
                .addGap(30, 30, 30))
        );

        testQuestion.getContentPane().add(questionPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 120, -1, -1));

        testBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background2.png"))); // NOI18N
        testQuestion.getContentPane().add(testBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        exitTestMenu.setText("Exit");
        exitTestMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitTestMenuMouseClicked(evt);
            }
        });
        testMenuBar.add(exitTestMenu);

        testQuestion.setJMenuBar(testMenuBar);

        testResult.setTitle("Test");
        testResult.setMinimumSize(new java.awt.Dimension(800, 630));
        testResult.setModal(true);
        testResult.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        resultPanel.setBackground(new java.awt.Color(255, 255, 255));
        resultPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        resultLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        resultLabel1.setText("Rezultati");

        resultLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        resultLabel2.setText("Jusu rezultati");

        percentageLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        percentageLabel1.setText("Procenti: X%");

        markLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        markLabel1.setText("Atzime: A");

        resultLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        resultLabel3.setText("Vidēji rezultati");

        percentageLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        percentageLabel2.setText("Procenti: X%");

        markLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        markLabel2.setText("Atzime: A");

        seeAnswerButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        seeAnswerButton.setText("Apskatīt atbildes");
        seeAnswerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeAnswerButtonActionPerformed(evt);
            }
        });

        resultEndButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        resultEndButton.setText("Beigt");
        resultEndButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultEndButtonActionPerformed(evt);
            }
        });

        resultComentLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        resultComentLabel.setText("Komentarijs");

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(resultLabel1)
                .addGap(139, 139, 139))
            .addGroup(resultPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultLabel2)
                    .addGroup(resultPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(markLabel1)
                            .addComponent(percentageLabel1))))
                .addGap(40, 40, 40)
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultLabel3)
                    .addGroup(resultPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(markLabel2)
                            .addComponent(percentageLabel2))))
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultComentLabel)
                    .addGroup(resultPanelLayout.createSequentialGroup()
                        .addComponent(seeAnswerButton)
                        .addGap(27, 27, 27)
                        .addComponent(resultEndButton)))
                .addContainerGap())
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(resultLabel1)
                .addGap(20, 20, 20)
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultLabel2)
                    .addComponent(resultLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(percentageLabel1)
                    .addComponent(percentageLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(markLabel1)
                    .addComponent(markLabel2))
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(resultPanelLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(resultEndButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultComentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(seeAnswerButton)
                        .addGap(32, 32, 32))))
        );

        testResult.getContentPane().add(resultPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 160, -1, -1));

        resultBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background2.png"))); // NOI18N
        testResult.getContentPane().add(resultBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        exitResultMenu.setText("Exit");
        exitResultMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitResultMenuMouseClicked(evt);
            }
        });
        resultMenuBar.add(exitResultMenu);

        testResult.setJMenuBar(resultMenuBar);

        testAnswer.setTitle("Test");
        testAnswer.setMaximumSize(new java.awt.Dimension(800, 650));
        testAnswer.setMinimumSize(new java.awt.Dimension(800, 630));
        testAnswer.setModal(true);
        testAnswer.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        testAnswerPanel.setBackground(new java.awt.Color(255, 255, 255));
        testAnswerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        testAnswerPanel.setPreferredSize(new java.awt.Dimension(700, 500));

        testAnswerLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        testAnswerLabel.setText("Jūsu atbildes");

        testAnswerButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        testAnswerButton.setText("Labi");
        testAnswerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testAnswerButtonActionPerformed(evt);
            }
        });

        testAnswerScrollPane.setPreferredSize(new java.awt.Dimension(236, 90));

        testAnswerOutput.setEditable(false);
        testAnswerOutput.setColumns(20);
        testAnswerOutput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        testAnswerOutput.setRows(5);
        testAnswerScrollPane.setViewportView(testAnswerOutput);

        javax.swing.GroupLayout testAnswerPanelLayout = new javax.swing.GroupLayout(testAnswerPanel);
        testAnswerPanel.setLayout(testAnswerPanelLayout);
        testAnswerPanelLayout.setHorizontalGroup(
            testAnswerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, testAnswerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(testAnswerButton)
                .addGap(309, 309, 309))
            .addGroup(testAnswerPanelLayout.createSequentialGroup()
                .addGroup(testAnswerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(testAnswerPanelLayout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(testAnswerLabel))
                    .addGroup(testAnswerPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(testAnswerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        testAnswerPanelLayout.setVerticalGroup(
            testAnswerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testAnswerPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(testAnswerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(testAnswerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(testAnswerButton)
                .addGap(30, 30, 30))
        );

        testAnswer.getContentPane().add(testAnswerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        testAnswerBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background2.png"))); // NOI18N
        testAnswer.getContentPane().add(testAnswerBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        helpRegistration.setTitle("Help");
        helpRegistration.setMaximumSize(new java.awt.Dimension(800, 600));
        helpRegistration.setMinimumSize(new java.awt.Dimension(800, 600));
        helpRegistration.setModal(true);
        helpRegistration.setPreferredSize(new java.awt.Dimension(800, 600));
        helpRegistration.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        helpRegistartionPanel1.setBackground(new java.awt.Color(255, 255, 255));
        helpRegistartionPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        helpRegistartionLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        helpRegistartionLabel1.setText("Reģistrācijas palīdzība");
        helpRegistartionLabel1.setToolTipText("");

        javax.swing.GroupLayout helpRegistartionPanel1Layout = new javax.swing.GroupLayout(helpRegistartionPanel1);
        helpRegistartionPanel1.setLayout(helpRegistartionPanel1Layout);
        helpRegistartionPanel1Layout.setHorizontalGroup(
            helpRegistartionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpRegistartionPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(helpRegistartionLabel1)
                .addGap(30, 30, 30))
        );
        helpRegistartionPanel1Layout.setVerticalGroup(
            helpRegistartionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpRegistartionPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(helpRegistartionLabel1)
                .addGap(30, 30, 30))
        );

        helpRegistration.getContentPane().add(helpRegistartionPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, 320, 90));

        helpRegistrationPanel2.setBackground(new java.awt.Color(255, 255, 255));
        helpRegistrationPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        helpRegistrationLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        helpRegistrationLabel1.setText("Ja jums nav konta, jums ir jāreģistrējas, ievadot datus tukšajos laukos:");

        helpRegistrationLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationLabel2.setText("Vārds: ievadiet savu vārdu (no 3 līdz  20 simboliem)");

        helpRegistrationLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationLabel3.setText("Uzvārds: ievadiet savu uzvārdu (no 3 līdz  20 simboliem)");

        helpRegistrationLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationLabel4.setText("Lietotārdu: ievadiet savu lietotārdu (no 3 līdz  20 simboliem)");

        helpRegistrationLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationLabel5.setText("Parole: ievadiet savu parole (no 6 līdz  20 simboliem)");

        helpRegistrationLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationLabel6.setText("Izvēlieties konta veidu!");
        helpRegistrationLabel6.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Nospiet uz pogu \"Reģistreties\"");

        helpRegistrationButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationButton.setText("Labi");
        helpRegistrationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpRegistrationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout helpRegistrationPanel2Layout = new javax.swing.GroupLayout(helpRegistrationPanel2);
        helpRegistrationPanel2.setLayout(helpRegistrationPanel2Layout);
        helpRegistrationPanel2Layout.setHorizontalGroup(
            helpRegistrationPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpRegistrationPanel2Layout.createSequentialGroup()
                .addGroup(helpRegistrationPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(helpRegistrationPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(helpRegistrationPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(helpRegistrationLabel6)
                            .addComponent(helpRegistrationLabel5)
                            .addComponent(helpRegistrationLabel4)
                            .addComponent(helpRegistrationLabel3)
                            .addComponent(helpRegistrationLabel2)
                            .addComponent(helpRegistrationLabel1)))
                    .addGroup(helpRegistrationPanel2Layout.createSequentialGroup()
                        .addGap(277, 277, 277)
                        .addComponent(helpRegistrationButton)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        helpRegistrationPanel2Layout.setVerticalGroup(
            helpRegistrationPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpRegistrationPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(helpRegistrationLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationButton)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        helpRegistration.getContentPane().add(helpRegistrationPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 150, 640, 340));

        helpRegistartionBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background2.png"))); // NOI18N
        helpRegistration.getContentPane().add(helpRegistartionBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 600));

        helpLogin.setTitle("Help");
        helpLogin.setMaximumSize(new java.awt.Dimension(800, 600));
        helpLogin.setModal(true);
        helpLogin.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        helpLoginPanel1.setBackground(new java.awt.Color(255, 255, 255));
        helpLoginPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        helpLoginLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        helpLoginLabel1.setText("Ielagošāna palīdzība");
        helpLoginLabel1.setToolTipText("");

        javax.swing.GroupLayout helpLoginPanel1Layout = new javax.swing.GroupLayout(helpLoginPanel1);
        helpLoginPanel1.setLayout(helpLoginPanel1Layout);
        helpLoginPanel1Layout.setHorizontalGroup(
            helpLoginPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpLoginPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(helpLoginLabel1)
                .addGap(30, 30, 30))
        );
        helpLoginPanel1Layout.setVerticalGroup(
            helpLoginPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpLoginPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(helpLoginLabel1)
                .addGap(30, 30, 30))
        );

        helpLogin.getContentPane().add(helpLoginPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, 320, 90));

        helpLoginPanel2.setBackground(new java.awt.Color(255, 255, 255));
        helpLoginPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        helpLoginLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        helpLoginLabel2.setText("Ja jums ir konts, jums ir jāielagoties, ievadot datus tukšajos laukos:");

        helpLoginLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpLoginLabel3.setText("Lietotārdu: ievadiet savu lietotārdu ");

        helpLoginLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpLoginLabel4.setText("Parole: ievadiet savu parole ");

        helpLoginLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpLoginLabel5.setText("Nospiet uz pogu \"Ielogoties\"");
        helpLoginLabel5.setToolTipText("");

        helpLoginButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpLoginButton.setText("Labi");
        helpLoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpLoginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout helpLoginPanel2Layout = new javax.swing.GroupLayout(helpLoginPanel2);
        helpLoginPanel2.setLayout(helpLoginPanel2Layout);
        helpLoginPanel2Layout.setHorizontalGroup(
            helpLoginPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpLoginPanel2Layout.createSequentialGroup()
                .addGroup(helpLoginPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(helpLoginPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(helpLoginPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(helpLoginLabel5)
                            .addComponent(helpLoginLabel4)
                            .addComponent(helpLoginLabel3)
                            .addComponent(helpLoginLabel2)))
                    .addGroup(helpLoginPanel2Layout.createSequentialGroup()
                        .addGap(277, 277, 277)
                        .addComponent(helpLoginButton)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        helpLoginPanel2Layout.setVerticalGroup(
            helpLoginPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpLoginPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(helpLoginLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpLoginLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpLoginLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpLoginLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpLoginButton)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        helpLogin.getContentPane().add(helpLoginPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 150, 640, 220));

        helpRegistartionBackground1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background2.png"))); // NOI18N
        helpLogin.getContentPane().add(helpRegistartionBackground1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 600));

        helpRegistration2.setTitle("Help");
        helpRegistration2.setMaximumSize(new java.awt.Dimension(800, 600));
        helpRegistration2.setModal(true);
        helpRegistration2.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        helpRegistartionPanel3.setBackground(new java.awt.Color(255, 255, 255));
        helpRegistartionPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        helpRegistartionLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        helpRegistartionLabel3.setText("Reģistrācijas palīdzība");
        helpRegistartionLabel3.setToolTipText("");

        javax.swing.GroupLayout helpRegistartionPanel3Layout = new javax.swing.GroupLayout(helpRegistartionPanel3);
        helpRegistartionPanel3.setLayout(helpRegistartionPanel3Layout);
        helpRegistartionPanel3Layout.setHorizontalGroup(
            helpRegistartionPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpRegistartionPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(helpRegistartionLabel3)
                .addGap(30, 30, 30))
        );
        helpRegistartionPanel3Layout.setVerticalGroup(
            helpRegistartionPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpRegistartionPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(helpRegistartionLabel3)
                .addGap(30, 30, 30))
        );

        helpRegistration2.getContentPane().add(helpRegistartionPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, 320, 90));

        helpRegistrationPanel4.setBackground(new java.awt.Color(255, 255, 255));
        helpRegistrationPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        helpRegistrationLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        helpRegistrationLabel13.setText("Ja jums nav konta, jums ir jāreģistrējas, ievadot datus tukšajos laukos:");

        helpRegistrationLabel14.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationLabel14.setText("Vārds: ievadiet savu vārdu (no 3 līdz  20 simboliem)");

        helpRegistrationLabel15.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationLabel15.setText("Uzvārds: ievadiet savu uzvārdu (no 3 līdz  20 simboliem)");

        helpRegistrationLabel16.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationLabel16.setText("Lietotārdu: ievadiet savu lietotārdu (no 3 līdz  20 simboliem)");

        helpRegistrationLabel17.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationLabel17.setText("Parole: ievadiet savu parole (no 6 līdz  20 simboliem)");

        helpRegistrationLabel18.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        helpRegistrationLabel18.setText("Izvēlieties konta veidu!");
        helpRegistrationLabel18.setToolTipText("");

        javax.swing.GroupLayout helpRegistrationPanel4Layout = new javax.swing.GroupLayout(helpRegistrationPanel4);
        helpRegistrationPanel4.setLayout(helpRegistrationPanel4Layout);
        helpRegistrationPanel4Layout.setHorizontalGroup(
            helpRegistrationPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpRegistrationPanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(helpRegistrationPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpRegistrationLabel18)
                    .addComponent(helpRegistrationLabel17)
                    .addComponent(helpRegistrationLabel16)
                    .addComponent(helpRegistrationLabel15)
                    .addComponent(helpRegistrationLabel14)
                    .addComponent(helpRegistrationLabel13))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        helpRegistrationPanel4Layout.setVerticalGroup(
            helpRegistrationPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(helpRegistrationPanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(helpRegistrationLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(helpRegistrationLabel18)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        helpRegistration2.getContentPane().add(helpRegistrationPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 150, 640, 260));

        helpRegistartionBackground2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background2.png"))); // NOI18N
        helpRegistration2.getContentPane().add(helpRegistartionBackground2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 600));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Test");
        setMinimumSize(new java.awt.Dimension(800, 630));
        getContentPane().setLayout(null);

        mainPanel1.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mainPanel2.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mainLabel2_1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        mainLabel2_1.setText("Sveiki!");

        mainLabel2_2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        mainLabel2_2.setText("Šajā lietotnē jūs varat pildīt testus");

        javax.swing.GroupLayout mainPanel2Layout = new javax.swing.GroupLayout(mainPanel2);
        mainPanel2.setLayout(mainPanel2Layout);
        mainPanel2Layout.setHorizontalGroup(
            mainPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanel2Layout.createSequentialGroup()
                .addGroup(mainPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanel2Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(mainLabel2_2))
                    .addGroup(mainPanel2Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(mainLabel2_1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanel2Layout.setVerticalGroup(
            mainPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(mainLabel2_1)
                .addGap(18, 18, 18)
                .addComponent(mainLabel2_2)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        mainLabel1_1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        mainLabel1_1.setText("Lietotāja pieslēgšanā");

        mainLabel1_2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        mainLabel1_2.setText("Lietotājvārds : ");

        mainLabel1_3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        mainLabel1_3.setText("Parole : ");

        mainTextField1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        mainTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainTextField1ActionPerformed(evt);
            }
        });

        mainTextField2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        mainButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        mainButton1.setText("Ielogoties");
        mainButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainButton1ActionPerformed(evt);
            }
        });

        mainLabel1_4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mainLabel1_4.setText("Konta nav? Izveidojiet to:");

        mainButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        mainButton2.setText("Reģistreties");
        mainButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanel1Layout = new javax.swing.GroupLayout(mainPanel1);
        mainPanel1.setLayout(mainPanel1Layout);
        mainPanel1Layout.setHorizontalGroup(
            mainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(mainPanel1Layout.createSequentialGroup()
                .addGroup(mainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(mainLabel1_1))
                    .addGroup(mainPanel1Layout.createSequentialGroup()
                        .addGroup(mainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(mainLabel1_2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(mainLabel1_3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mainTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mainButton1)
                            .addComponent(mainTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(mainLabel1_4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainButton2)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        mainPanel1Layout.setVerticalGroup(
            mainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanel1Layout.createSequentialGroup()
                .addComponent(mainPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mainLabel1_1)
                .addGap(30, 30, 30)
                .addGroup(mainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainLabel1_2)
                    .addComponent(mainTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainLabel1_3)
                    .addComponent(mainTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(mainButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(mainPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainLabel1_4)
                    .addComponent(mainButton2))
                .addGap(20, 20, 20))
        );

        getContentPane().add(mainPanel1);
        mainPanel1.setBounds(202, 30, 396, 519);

        mainBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/background2.png"))); // NOI18N
        getContentPane().add(mainBackground);
        mainBackground.setBounds(0, 0, 800, 580);

        exitMainMenu.setText("Exit");
        exitMainMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMainMenuMouseClicked(evt);
            }
        });
        mainMenuBar.add(exitMainMenu);

        helpMainMenu.setText("Help");
        helpMainMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpMainMenuMouseClicked(evt);
            }
        });
        mainMenuBar.add(helpMainMenu);

        setJMenuBar(mainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mainTextField1ActionPerformed

    private void mainButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainButton1ActionPerformed
        boolean found = false;
        try (BufferedReader reader = new BufferedReader(new FileReader("lietotaji.txt"))) {
            {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 5) 
                    { 
                        String savedtype = parts[0];
                        String savedname = parts[1];
                        String savedsurname = parts[2];
                        String savedlogin = parts[3];
                        String savedpassword = parts[4];
                        
                        if(savedlogin.equals(mainTextField1.getText().trim()) && savedpassword.equals(mainTextField2.getText().trim()))
                        {
                            found = true;
                            
                            type = savedtype;
                            name = savedname;
                            surname = savedsurname;
                            login = savedlogin;
                            password = savedpassword;
                            
                            if (type.equals("Skolēns")) 
                            {
                                user = new Student(name, surname, login, password);
                            } else if (type.equals("Skolotājs"))
                            {
                                user = new Admin(name, surname, login, password);
                            }
                        }
                    }
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Pārbaudiet ievadīto lietotājvārdu un paroli!", "Kļuda", JOptionPane.ERROR_MESSAGE);
        }
        
        if(found == true)
        {
            if (user.enter(login, password) && type.equals("Skolēns")){
            JOptionPane.showMessageDialog(null, "Veiksmīgs iekļūšana kā " + type + ": " + name + " " + surname, "Informācija", JOptionPane.INFORMATION_MESSAGE);
            setVisible(false);
            studentTest.setSize(800,650);
            studentTest.setLocationRelativeTo(null);
            studentTest.setVisible(true);
            }
            else if (user.enter(login, password) && type.equals("Skolotājs")){
                JOptionPane.showMessageDialog(null, "Veiksmīgs iekļūšana kā " + type + ": " + name + " " + surname, "Informācija", JOptionPane.INFORMATION_MESSAGE);
                setVisible(false);
                teacherTest.setSize(800,650);
                teacherTest.setLocationRelativeTo(null);
                teacherTest.setVisible(true);
            }
            mainTextField1.setText("");
            mainTextField2.setText("");
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Pārbaudiet ievadīto lietotājvārdu un paroli!", "Kļuda", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mainButton1ActionPerformed

    private void mainButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainButton2ActionPerformed
        mainTextField1.setText("");
        mainTextField2.setText("");
        setVisible(false);
        registration.setSize(800,650);
        registration.setLocationRelativeTo(null);
        registration.setVisible(true);
    }//GEN-LAST:event_mainButton2ActionPerformed

    private void registrationButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrationButton1ActionPerformed
        name = registrationTextField1.getText().trim();
        surname = registrationTextField2.getText().trim();
        login = registrationTextField3.getText().trim();
        password = registrationTextField4.getText().trim();
        String confirmPassword = registrationTextField5.getText().trim();
        if(registrationRadioButton1.isSelected())
        {
            type = "Skolēns";
        }
        if(registrationRadioButton2.isSelected())
        {
            type = "Skolotājs";
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("lietotaji.txt", true))) {
            if(
                name.length() >= 3 && name.length() <= 20 &&
                surname.length() >= 3 && surname.length() <= 20 &&
                login.length() >= 3 && login.length() <= 20 &&
                password.length() >= 6 && password.length() <= 20 && password.equals(confirmPassword) &&
                !type.equals("")
                )
            {
                writer.write(type + "|" + name + "|" + surname + "|" + login + "|" + password);
                writer.newLine();
                
                JOptionPane.showMessageDialog(null, "Lietotājs saglabāts!", "Informācija", JOptionPane.INFORMATION_MESSAGE);
                
                registrationTextField1.setText("");
                registrationTextField2.setText("");
                registrationTextField3.setText("");
                registrationTextField4.setText("");
                registrationTextField5.setText("");
                registrationButtonGroup.clearSelection();
                
                registration.setVisible(false);
                setVisible(true);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Nepareizi ievadīti dati!", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Kļūda saglabājot datus!", "Kļuda", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_registrationButton1ActionPerformed

    private void registrationButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrationButton2ActionPerformed
        registrationTextField1.setText("");
        registrationTextField2.setText("");
        registrationTextField3.setText("");
        registrationTextField4.setText("");
        registrationTextField5.setText("");
        registrationButtonGroup.clearSelection();
        registration.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_registrationButton2ActionPerformed

    private void question7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question7ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 7;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question7ActionPerformed

    private void question11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question11ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 11;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question11ActionPerformed

    private void studentStartTestButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentStartTestButton1ActionPerformed
        try {
            FileChannel.open(Paths.get("rezultati1Test.txt"), StandardOpenOption.WRITE).truncate(0).close();
        } catch (IOException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        if(work1 == true)
        {
            test1 = true;
            test2 = false;
            questionButtonGroup.clearSelection();
            questionCount = 1;
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split("\\|");
                        if (parts.length == 6) 
                        { 
                            int savedquestionCount = Integer.parseInt(parts[0]);
                            String savedtext = parts[1];
                            String savedanswer[] = {parts[2], parts[3], parts[4]};
                            int savedcorrectAnswer = Integer.parseInt(parts[5]); 
                            
                            if(savedquestionCount == questionCount)
                            {
                                text = savedtext;
                                answer[0] = savedanswer[0];
                                answer[1] = savedanswer[1];
                                answer[2] = savedanswer[2];
                                correctAnswer = savedcorrectAnswer;
                                question = new Question(text, answer, correctAnswer);

                                questionLabel.setText(question.getText());
                                questionRadioButton1.setText(answer[0]);
                                questionRadioButton2.setText(answer[1]);
                                questionRadioButton3.setText(answer[2]);
                            }
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
            studentTest.setVisible(false);
            testQuestion.setSize(800,650);
            testQuestion.setLocationRelativeTo(null);
            testQuestion.setVisible(true);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Tests nav pieejams izpildei", "Informācija", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_studentStartTestButton1ActionPerformed

    private void studentExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentExitButtonActionPerformed
        type = null;
        name = null;
        surname = null;
        login = null;
        password = null;
        user = null;
        studentTest.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_studentExitButtonActionPerformed

    private void teacherStartTestButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacherStartTestButton1ActionPerformed
        if(work1 == true)
        {
            JOptionPane.showMessageDialog(null, "Tests jau ir pieejams izpildei", "Informācija", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            int choice = JOptionPane.showConfirmDialog(null, "Dod iespēju veikt testu?","Apstiprinājums", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                work1 = true;
                JOptionPane.showMessageDialog(null, "Tests ir pieejams izpildei.");
            } else if (choice == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Tests nav pieejams izpildei.");
            }
        }
    }//GEN-LAST:event_teacherStartTestButton1ActionPerformed

    private void teacherTestStatusButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacherTestStatusButton1ActionPerformed
        if(work1 == true){
            JOptionPane.showMessageDialog(null, "Tests ir pieejams izpildei!", "Informācija", JOptionPane.INFORMATION_MESSAGE);
            int choice = JOptionPane.showConfirmDialog(null, "Pabeigt testu?","Apstiprinājums", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                work1 = false;
                JOptionPane.showMessageDialog(null, "Tests ir pabeigts.");
            } 
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Tests nav pieejams izpildei!", "Informācija", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_teacherTestStatusButton1ActionPerformed

    private void teacherExtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacherExtButtonActionPerformed
        type = null;
        name = null;
        surname = null;
        login = null;
        password = null;
        user = null;
        teacherTest.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_teacherExtButtonActionPerformed

    private void nextQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQuestionButtonActionPerformed
        if(questionRadioButton1.isSelected())
        {
            selectedAnswer = questionRadioButton1.getText();
        }
        else if(questionRadioButton2.isSelected())
        {
            selectedAnswer = questionRadioButton2.getText();
        }
        else if(questionRadioButton3.isSelected())
        {
            selectedAnswer = questionRadioButton3.getText();
        }
        else
        {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount++;
        
        if(questionCount <= 20)
        {
            if(test1 == true)
            {
                try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split("\\|");
                        if (parts.length == 6) 
                        { 
                            int savedquestionCount = Integer.parseInt(parts[0]);
                            String savedtext = parts[1];
                            String savedanswer[] = {parts[2], parts[3], parts[4]};
                            int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                            if(savedquestionCount == questionCount)
                            {
                                text = savedtext;
                                answer[0] = savedanswer[0];
                                answer[1] = savedanswer[1];
                                answer[2] = savedanswer[2];
                                correctAnswer = savedcorrectAnswer;
                                question = new Question(text, answer, correctAnswer);

                                questionLabel.setText(question.getText());
                                questionRadioButton1.setText(answer[0]);
                                questionRadioButton2.setText(answer[1]);
                                questionRadioButton3.setText(answer[2]);
                            }
                        }
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
                }
            }
            else if(test2 == true)
            {
                try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split("\\|");
                        if (parts.length == 6) 
                        { 
                            int savedquestionCount = Integer.parseInt(parts[0]);
                            String savedtext = parts[1];
                            String savedanswer[] = {parts[2], parts[3], parts[4]};
                            int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                            if(savedquestionCount == questionCount)
                            {
                                text = savedtext;
                                answer[0] = savedanswer[0];
                                answer[1] = savedanswer[1];
                                answer[2] = savedanswer[2];
                                correctAnswer = savedcorrectAnswer;
                                question = new Question(text, answer, correctAnswer);

                                questionLabel.setText(question.getText());
                                questionRadioButton1.setText(answer[0]);
                                questionRadioButton2.setText(answer[1]);
                                questionRadioButton3.setText(answer[2]);
                            }
                        }
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        else
        {
            int choice = JOptionPane.showConfirmDialog(null, "Pabeigt testu?","Apstiprinājums", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(null, "Tests ir pabeigts.");
                
                if(test1 == true)
                {
                    try (BufferedWriter writer = new BufferedWriter(new FileWriter("rezultati1Test.txt"))) {
                    for (int i = 0; i < 20; i++) {
                        if (selectedAnswers[i] != null) {
                            writer.write((i + 1) + "|" + selectedAnswers[i] + "|" + correctAnswers[i] + "|" + results[i]);
                            writer.newLine();
                        }
                    }
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Kļūda saglabājot rezultātus!", "Kļūda", JOptionPane.ERROR_MESSAGE);
                    }

                    rightAnswersCount = 0;
                    for (int i = 0; i < results.length; i++) {
                        if ("Pareizi".equals(results[i])) {
                            rightAnswersCount++;
                        }
                    }  

                    percent = result.getPercent(rightAnswersCount, 20);
                    grade = result.getGradeFromPercent(percent);
                    try (BufferedWriter writer = new BufferedWriter(new FileWriter("statistika1Test.txt", true))) {
                        writer.write(percent + "|" + grade);
                        writer.newLine();
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Kļūda saglabājot statistiku!", "Kļuda", JOptionPane.ERROR_MESSAGE);
                    }

                    int sum = 0;
                    int count = 0;
                    try (BufferedReader reader = new BufferedReader(new FileReader("statistika1Test.txt"))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            String[] parts = line.split("\\|");
                            if (parts.length == 2) {
                                sum += Integer.parseInt(parts[0]);
                                count++;
                            }
                        }
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Kļūda nolasot statistiku!", "Kļuda", JOptionPane.ERROR_MESSAGE);
                    }
                    average = (count > 0 ? sum / count : 0) / 10;
                    avgPercent = average * 10;
                }
                else if(test2 == true)
                {
                    try (BufferedWriter writer = new BufferedWriter(new FileWriter("rezultati2Test.txt"))) {
                    for (int i = 0; i < 20; i++) {
                        if (selectedAnswers[i] != null) {
                            writer.write((i + 1) + "|" + selectedAnswers[i] + "|" + correctAnswers[i] + "|" + results[i]);
                            writer.newLine();
                        }
                    }
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Kļūda saglabājot rezultātus!", "Kļūda", JOptionPane.ERROR_MESSAGE);
                    }

                    rightAnswersCount = 0;
                    for (int i = 0; i < results.length; i++) {
                        if ("Pareizi".equals(results[i])) {
                            rightAnswersCount++;
                        }
                    }  

                    percent = result.getPercent(rightAnswersCount, 20);
                    grade = result.getGradeFromPercent(percent);
                    try (BufferedWriter writer = new BufferedWriter(new FileWriter("statistika2Test.txt", true))) {
                        writer.write(percent + "|" + grade);
                        writer.newLine();
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Kļūda saglabājot statistiku!", "Kļuda", JOptionPane.ERROR_MESSAGE);
                    }

                    int sum = 0;
                    int count = 0;
                    try (BufferedReader reader = new BufferedReader(new FileReader("statistika2Test.txt"))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            String[] parts = line.split("\\|");
                            if (parts.length == 2) {
                                sum += Integer.parseInt(parts[0]);
                                count++;
                            }
                        }
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Kļūda nolasot statistiku!", "Kļuda", JOptionPane.ERROR_MESSAGE);
                    }
                    average = (count > 0 ? sum / count : 0) / 10;
                    avgPercent = average * 10;
                }
                
                        
                testQuestion.setVisible(false);
                percentageLabel1.setText("Procenti: " + percent + "%");
                markLabel1.setText("Atzīme: " + grade);
                
                percentageLabel2.setText("Procenti: " + avgPercent + "%");
                markLabel2.setText("Atzīme: " + average);
                
                if (grade == 10){resultComentLabel.setText("Izcili!");}
                else if (grade == 9) {resultComentLabel.setText("Teicami!");}
                else if (grade == 8) {resultComentLabel.setText("Ļoti labi!");}
                else if (grade == 7) {resultComentLabel.setText("Labi!");}
                else if (grade == 6) {resultComentLabel.setText("Apmierinoši!");}
                else if (grade == 5) {resultComentLabel.setText("Pietiekami!");}
                else if (grade == 4) {resultComentLabel.setText("Gandrīz pietiekami!");}
                else if (grade == 3) {resultComentLabel.setText("Nepietiekami!");}
                else if (grade == 2) {resultComentLabel.setText("Ļoti nepietiekami!");}
                else {resultComentLabel.setText("Ļoti vājš sniegums!");}
                
                testResult.setSize(800,650);
                testResult.setLocationRelativeTo(null);
                testResult.setVisible(true);
            } 
        }
    }//GEN-LAST:event_nextQuestionButtonActionPerformed

    private void question1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question1ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";

        questionButtonGroup.clearSelection();
        questionCount = 1;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question1ActionPerformed

    private void question2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question2ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 2;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question2ActionPerformed

    private void question3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question3ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 3;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question3ActionPerformed

    private void question4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question4ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 4;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question4ActionPerformed

    private void question5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question5ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 5;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question5ActionPerformed

    private void question6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question6ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 6;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question6ActionPerformed

    private void question8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question8ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 8;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question8ActionPerformed

    private void question9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question9ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 9;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question9ActionPerformed

    private void question10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question10ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 10;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question10ActionPerformed

    private void question12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question12ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 12;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question12ActionPerformed

    private void question13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question13ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 13;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question13ActionPerformed

    private void question14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question14ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 14;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question14ActionPerformed

    private void question15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question15ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 15;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question15ActionPerformed

    private void question16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question16ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 16;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question16ActionPerformed

    private void question17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question17ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 17;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question17ActionPerformed

    private void question18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question18ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 18;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question18ActionPerformed

    private void question19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question19ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 19;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question19ActionPerformed

    private void question20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question20ActionPerformed
        if (questionRadioButton1.isSelected()) {
            selectedAnswer = questionRadioButton1.getText();
        } else if (questionRadioButton2.isSelected()) {
            selectedAnswer = questionRadioButton2.getText();
        } else if (questionRadioButton3.isSelected()) {
            selectedAnswer = questionRadioButton3.getText();
        } else {
            selectedAnswer = "Atbilde nav izvēlēta";
        }

        String correct = question.isCorrect(question.getCorrectAnswer());
        selectedAnswers[questionCount - 1] = selectedAnswer;
        correctAnswers[questionCount - 1] = correct;
        results[questionCount - 1] = selectedAnswer.equals(correct) ? "Pareizi" : "Nepareizi";
        
        questionButtonGroup.clearSelection();
        questionCount = 20;
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 6) 
                    { 
                        int savedquestionCount = Integer.parseInt(parts[0]);
                        String savedtext = parts[1];
                        String savedanswer[] = {parts[2], parts[3], parts[4]};
                        int savedcorrectAnswer = Integer.parseInt(parts[5]); 

                        if(savedquestionCount == questionCount)
                        {
                            text = savedtext;
                            answer[0] = savedanswer[0];
                            answer[1] = savedanswer[1];
                            answer[2] = savedanswer[2];
                            correctAnswer = savedcorrectAnswer;
                            question = new Question(text, answer, correctAnswer);

                            questionLabel.setText(question.getText());
                            questionRadioButton1.setText(answer[0]);
                            questionRadioButton2.setText(answer[1]);
                            questionRadioButton3.setText(answer[2]);
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_question20ActionPerformed

    private void questionEndButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionEndButtonActionPerformed
        int choice = JOptionPane.showConfirmDialog(null, "Pabeigt testu?","Apstiprinājums", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(null, "Tests ir pabeigts.");

            if(test1 == true)
            {
                try (BufferedWriter writer = new BufferedWriter(new FileWriter("rezultati1Test.txt"))) {
                for (int i = 0; i < 20; i++) {
                    if (selectedAnswers[i] != null) {
                        writer.write((i + 1) + "|" + selectedAnswers[i] + "|" + correctAnswers[i] + "|" + results[i]);
                        writer.newLine();
                    }
                }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Kļūda saglabājot rezultātus!", "Kļūda", JOptionPane.ERROR_MESSAGE);
                }

                rightAnswersCount = 0;
                for (int i = 0; i < results.length; i++) {
                    if ("Pareizi".equals(results[i])) {
                        rightAnswersCount++;
                    }
                }  

                percent = result.getPercent(rightAnswersCount, 20);
                grade = result.getGradeFromPercent(percent);
                try (BufferedWriter writer = new BufferedWriter(new FileWriter("statistika1Test.txt", true))) {
                    writer.write(percent + "|" + grade);
                    writer.newLine();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Kļūda saglabājot statistiku!", "Kļuda", JOptionPane.ERROR_MESSAGE);
                }

                int sum = 0;
                int count = 0;
                try (BufferedReader reader = new BufferedReader(new FileReader("statistika1Test.txt"))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split("\\|");
                        if (parts.length == 2) {
                            sum += Integer.parseInt(parts[0]);
                            count++;
                        }
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Kļūda nolasot statistiku!", "Kļuda", JOptionPane.ERROR_MESSAGE);
                }
                average = (count > 0 ? sum / count : 0) / 10;
                avgPercent = average * 10;
            }
            
            else if(test2 == true)
            {
                try (BufferedWriter writer = new BufferedWriter(new FileWriter("rezultati2Test.txt"))) {
                for (int i = 0; i < 20; i++) {
                    if (selectedAnswers[i] != null) {
                        writer.write((i + 1) + "|" + selectedAnswers[i] + "|" + correctAnswers[i] + "|" + results[i]);
                        writer.newLine();
                    }
                }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Kļūda saglabājot rezultātus!", "Kļūda", JOptionPane.ERROR_MESSAGE);
                }

                rightAnswersCount = 0;
                for (int i = 0; i < results.length; i++) {
                    if ("Pareizi".equals(results[i])) {
                        rightAnswersCount++;
                    }
                }  

                percent = result.getPercent(rightAnswersCount, 20);
                grade = result.getGradeFromPercent(percent);
                try (BufferedWriter writer = new BufferedWriter(new FileWriter("statistika2Test.txt", true))) {
                    writer.write(percent + "|" + grade);
                    writer.newLine();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Kļūda saglabājot statistiku!", "Kļuda", JOptionPane.ERROR_MESSAGE);
                }

                int sum = 0;
                int count = 0;
                try (BufferedReader reader = new BufferedReader(new FileReader("statistika2Test.txt"))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split("\\|");
                        if (parts.length == 2) {
                            sum += Integer.parseInt(parts[0]);
                            count++;
                        }
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Kļūda nolasot statistiku!", "Kļuda", JOptionPane.ERROR_MESSAGE);
                }
                average = (count > 0 ? sum / count : 0) / 10;
                avgPercent = average * 10;
            }


            testQuestion.setVisible(false);
            percentageLabel1.setText("Procenti: " + percent + "%");
            markLabel1.setText("Atzīme: " + grade);

            percentageLabel2.setText("Procenti: " + avgPercent + "%");
            markLabel2.setText("Atzīme: " + average);
            if (grade == 10){resultComentLabel.setText("Izcili!");}
            else if (grade == 9) {resultComentLabel.setText("Teicami!");}
            else if (grade == 8) {resultComentLabel.setText("Ļoti labi!");}
            else if (grade == 7) {resultComentLabel.setText("Labi!");}
            else if (grade == 6) {resultComentLabel.setText("Apmierinoši!");}
            else if (grade == 5) {resultComentLabel.setText("Pietiekami!");}
            else if (grade == 4) {resultComentLabel.setText("Gandrīz pietiekami!");}
            else if (grade == 3) {resultComentLabel.setText("Nepietiekami!");}
            else if (grade == 2) {resultComentLabel.setText("Ļoti nepietiekami!");}
            else {resultComentLabel.setText("Ļoti vājš sniegums!");}
            testResult.setSize(800,650);
            testResult.setLocationRelativeTo(null);
            testResult.setVisible(true);
        } 
    }//GEN-LAST:event_questionEndButtonActionPerformed

    private void seeAnswerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeAnswerButtonActionPerformed
        testAnswerOutput.setText("");
        if(test1 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("rezultati1Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 4) 
                    { 
                        questionCount = Integer.parseInt(parts[0]);
                        selectedAnswers[questionCount - 1] = String.valueOf(parts[1]);
                        correctAnswers[questionCount - 1] = String.valueOf(parts[2]);
                        results[questionCount - 1] = parts[3];
                        
                        testAnswerOutput.append(questionCount + ". Jautājums :\n");
                        testAnswerOutput.append("Izvēlētā atbilde: " + selectedAnswers[questionCount - 1] + "\n");
                        testAnswerOutput.append("Pareizā atbilde: " + correctAnswers[questionCount - 1] + "\n");
                        testAnswerOutput.append("Rezultāts: " + results[questionCount - 1] + "\n");
                        testAnswerOutput.append("----------------------------------------------------\n");
                    }   
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        else if(test2 == true)
        {
            try (BufferedReader reader = new BufferedReader(new FileReader("rezultati2Test.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split("\\|");
                    if (parts.length == 4) 
                    { 
                        questionCount = Integer.parseInt(parts[0]);
                        selectedAnswers[questionCount - 1] = String.valueOf(parts[1]);
                        correctAnswers[questionCount - 1] = String.valueOf(parts[2]);
                        results[questionCount - 1] = parts[3];
                        
                        testAnswerOutput.append(questionCount + ". Jautājums :\n");
                        testAnswerOutput.append("Izvēlētā atbilde: " + selectedAnswers[questionCount - 1] + "\n");
                        testAnswerOutput.append("Pareizā atbilde: " + correctAnswers[questionCount - 1] + "\n");
                        testAnswerOutput.append("Rezultāts: " + results[questionCount - 1] + "\n");
                        testAnswerOutput.append("----------------------------------------------------\n");
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
        }
        testResult.setVisible(false);
        testAnswer.setSize(800,600);
        testAnswer.setLocationRelativeTo(null);
        testAnswer.setVisible(true);
    }//GEN-LAST:event_seeAnswerButtonActionPerformed

    private void resultEndButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultEndButtonActionPerformed
        testResult.setVisible(false);
        studentTest.setSize(800,650);
        studentTest.setLocationRelativeTo(null);
        studentTest.setVisible(true);
    }//GEN-LAST:event_resultEndButtonActionPerformed

    private void exitMainMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMainMenuMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitMainMenuMouseClicked

    private void exitResultMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitResultMenuMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitResultMenuMouseClicked

    private void exitTestMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTestMenuMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitTestMenuMouseClicked

    private void exitTeacherTestMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTeacherTestMenuMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitTeacherTestMenuMouseClicked

    private void exitStudentTestMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitStudentTestMenuMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitStudentTestMenuMouseClicked

    private void exitRegistrationMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitRegistrationMenuMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitRegistrationMenuMouseClicked

    private void helpMainMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpMainMenuMouseClicked
        helpLogin.setSize(800,600);
        helpLogin.setLocationRelativeTo(null);
        helpLogin.setVisible(true);
    }//GEN-LAST:event_helpMainMenuMouseClicked

    private void helpRegistrationMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpRegistrationMenuMouseClicked
        helpRegistration.setSize(800,600);
        helpRegistration.setLocationRelativeTo(null);
        helpRegistration.setVisible(true);
    }//GEN-LAST:event_helpRegistrationMenuMouseClicked

    private void teacherStartTestButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacherStartTestButton2ActionPerformed
        if(work2 == true)
        {
            JOptionPane.showMessageDialog(null, "Tests jau ir pieejams izpildei", "Informācija", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            int choice = JOptionPane.showConfirmDialog(null, "Dod iespēju veikt testu?","Apstiprinājums", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                work2 = true;
                JOptionPane.showMessageDialog(null, "Tests ir pieejams izpildei.");
            } else if (choice == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Tests nav pieejams izpildei.");
            }
        }
    }//GEN-LAST:event_teacherStartTestButton2ActionPerformed

    private void teacherTestStatusButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacherTestStatusButton2ActionPerformed
        if(work2 == true){
            JOptionPane.showMessageDialog(null, "Tests ir pieejams izpildei!", "Informācija", JOptionPane.INFORMATION_MESSAGE);
            int choice = JOptionPane.showConfirmDialog(null, "Pabeigt testu?","Apstiprinājums", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.YES_OPTION) {
                work2 = false;
                JOptionPane.showMessageDialog(null, "Tests ir pabeigts.");
            } 
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Tests nav pieejams izpildei!", "Informācija", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_teacherTestStatusButton2ActionPerformed

    private void studentStartTestButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentStartTestButton2ActionPerformed
        try {
            FileChannel.open(Paths.get("rezultati1Test.txt"), StandardOpenOption.WRITE).truncate(0).close();
        } catch (IOException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(work2 == true)
        {
            test2 = true;
            test1 = false;
            questionButtonGroup.clearSelection();
            questionCount = 1;
            try (BufferedReader reader = new BufferedReader(new FileReader("jautajumi2Test.txt"))) {
                {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String[] parts = line.split("\\|");
                        if (parts.length == 6) 
                        { 
                            int savedquestionCount = Integer.parseInt(parts[0]);
                            String savedtext = parts[1];
                            String savedanswer[] = {parts[2], parts[3], parts[4]};
                            int savedcorrectAnswer = Integer.parseInt(parts[5]); 
                            
                            if(savedquestionCount == questionCount)
                            {
                                text = savedtext;
                                answer[0] = savedanswer[0];
                                answer[1] = savedanswer[1];
                                answer[2] = savedanswer[2];
                                correctAnswer = savedcorrectAnswer;
                                question = new Question(text, answer, correctAnswer);

                                questionLabel.setText(question.getText());
                                questionRadioButton1.setText(answer[0]);
                                questionRadioButton2.setText(answer[1]);
                                questionRadioButton3.setText(answer[2]);
                            }
                        }
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Notika kļūda", "Kļuda", JOptionPane.ERROR_MESSAGE);
            }
            studentTest.setVisible(false);
            testQuestion.setSize(800,650);
            testQuestion.setLocationRelativeTo(null);
            testQuestion.setVisible(true);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Tests nav pieejams izpildei", "Informācija", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_studentStartTestButton2ActionPerformed

    private void testAnswerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testAnswerButtonActionPerformed
        testAnswer.setVisible(false);
        testResult.setSize(800,650);
        testResult.setLocationRelativeTo(null);
        testResult.setVisible(true);
    }//GEN-LAST:event_testAnswerButtonActionPerformed

    private void helpRegistrationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpRegistrationButtonActionPerformed
        helpRegistration.setVisible(false);
    }//GEN-LAST:event_helpRegistrationButtonActionPerformed

    private void helpLoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpLoginButtonActionPerformed
        helpLogin.setVisible(false);
    }//GEN-LAST:event_helpLoginButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu exitMainMenu;
    private javax.swing.JMenu exitRegistrationMenu;
    private javax.swing.JMenu exitResultMenu;
    private javax.swing.JMenu exitStudentTestMenu;
    private javax.swing.JMenu exitTeacherTestMenu;
    private javax.swing.JMenu exitTestMenu;
    private javax.swing.JDialog helpLogin;
    private javax.swing.JButton helpLoginButton;
    private javax.swing.JLabel helpLoginLabel1;
    private javax.swing.JLabel helpLoginLabel2;
    private javax.swing.JLabel helpLoginLabel3;
    private javax.swing.JLabel helpLoginLabel4;
    private javax.swing.JLabel helpLoginLabel5;
    private javax.swing.JPanel helpLoginPanel1;
    private javax.swing.JPanel helpLoginPanel2;
    private javax.swing.JMenu helpMainMenu;
    private javax.swing.JLabel helpRegistartionBackground;
    private javax.swing.JLabel helpRegistartionBackground1;
    private javax.swing.JLabel helpRegistartionBackground2;
    private javax.swing.JLabel helpRegistartionLabel1;
    private javax.swing.JLabel helpRegistartionLabel3;
    private javax.swing.JPanel helpRegistartionPanel1;
    private javax.swing.JPanel helpRegistartionPanel3;
    private javax.swing.JDialog helpRegistration;
    private javax.swing.JDialog helpRegistration2;
    private javax.swing.JButton helpRegistrationButton;
    private javax.swing.JLabel helpRegistrationLabel1;
    private javax.swing.JLabel helpRegistrationLabel13;
    private javax.swing.JLabel helpRegistrationLabel14;
    private javax.swing.JLabel helpRegistrationLabel15;
    private javax.swing.JLabel helpRegistrationLabel16;
    private javax.swing.JLabel helpRegistrationLabel17;
    private javax.swing.JLabel helpRegistrationLabel18;
    private javax.swing.JLabel helpRegistrationLabel2;
    private javax.swing.JLabel helpRegistrationLabel3;
    private javax.swing.JLabel helpRegistrationLabel4;
    private javax.swing.JLabel helpRegistrationLabel5;
    private javax.swing.JLabel helpRegistrationLabel6;
    private javax.swing.JMenu helpRegistrationMenu;
    private javax.swing.JPanel helpRegistrationPanel2;
    private javax.swing.JPanel helpRegistrationPanel4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel mainBackground;
    private javax.swing.JButton mainButton1;
    private javax.swing.JButton mainButton2;
    private javax.swing.JLabel mainLabel1_1;
    private javax.swing.JLabel mainLabel1_2;
    private javax.swing.JLabel mainLabel1_3;
    private javax.swing.JLabel mainLabel1_4;
    private javax.swing.JLabel mainLabel2_1;
    private javax.swing.JLabel mainLabel2_2;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JPanel mainPanel1;
    private javax.swing.JPanel mainPanel2;
    private javax.swing.JTextField mainTextField1;
    private javax.swing.JTextField mainTextField2;
    private javax.swing.JLabel markLabel1;
    private javax.swing.JLabel markLabel2;
    private javax.swing.JButton nextQuestionButton;
    private javax.swing.JLabel percentageLabel1;
    private javax.swing.JLabel percentageLabel2;
    private javax.swing.JLabel qLabel;
    private javax.swing.JButton question1;
    private javax.swing.JButton question10;
    private javax.swing.JButton question11;
    private javax.swing.JButton question12;
    private javax.swing.JButton question13;
    private javax.swing.JButton question14;
    private javax.swing.JButton question15;
    private javax.swing.JButton question16;
    private javax.swing.JButton question17;
    private javax.swing.JButton question18;
    private javax.swing.JButton question19;
    private javax.swing.JButton question2;
    private javax.swing.JButton question20;
    private javax.swing.JButton question3;
    private javax.swing.JButton question4;
    private javax.swing.JButton question5;
    private javax.swing.JButton question6;
    private javax.swing.JButton question7;
    private javax.swing.JButton question8;
    private javax.swing.JButton question9;
    private javax.swing.ButtonGroup questionButtonGroup;
    private javax.swing.JButton questionEndButton;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JPanel questionPanel1;
    private javax.swing.JPanel questionPanel2;
    private javax.swing.JRadioButton questionRadioButton1;
    private javax.swing.JRadioButton questionRadioButton2;
    private javax.swing.JRadioButton questionRadioButton3;
    private javax.swing.JDialog registration;
    private javax.swing.JLabel registrationBackground;
    private javax.swing.JButton registrationButton1;
    private javax.swing.JButton registrationButton2;
    private javax.swing.ButtonGroup registrationButtonGroup;
    private javax.swing.JLabel registrationLabel1;
    private javax.swing.JLabel registrationLabel2;
    private javax.swing.JLabel registrationLabel3;
    private javax.swing.JLabel registrationLabel4;
    private javax.swing.JLabel registrationLabel5;
    private javax.swing.JLabel registrationLabel6;
    private javax.swing.JLabel registrationLabel7;
    private javax.swing.JLabel registrationLabel8;
    private javax.swing.JMenuBar registrationMenuBar;
    private javax.swing.JPanel registrationPanel;
    private javax.swing.JRadioButton registrationRadioButton1;
    private javax.swing.JRadioButton registrationRadioButton2;
    private javax.swing.JTextField registrationTextField1;
    private javax.swing.JTextField registrationTextField2;
    private javax.swing.JTextField registrationTextField3;
    private javax.swing.JTextField registrationTextField4;
    private javax.swing.JTextField registrationTextField5;
    private javax.swing.JLabel resultBackground;
    private javax.swing.JLabel resultComentLabel;
    private javax.swing.JButton resultEndButton;
    private javax.swing.JLabel resultLabel1;
    private javax.swing.JLabel resultLabel2;
    private javax.swing.JLabel resultLabel3;
    private javax.swing.JMenuBar resultMenuBar;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JButton seeAnswerButton;
    private javax.swing.JButton studentExitButton;
    private javax.swing.JButton studentStartTestButton1;
    private javax.swing.JButton studentStartTestButton2;
    private javax.swing.JDialog studentTest;
    private javax.swing.JLabel studentTestBackground;
    private javax.swing.JLabel studentTestLabel1;
    private javax.swing.JLabel studentTestLabel2;
    private javax.swing.JMenuBar studentTestMenuBar;
    private javax.swing.JPanel studentTestPanel;
    private javax.swing.JButton teacherExtButton;
    private javax.swing.JButton teacherStartTestButton1;
    private javax.swing.JButton teacherStartTestButton2;
    private javax.swing.JDialog teacherTest;
    private javax.swing.JLabel teacherTestBackground;
    private javax.swing.JLabel teacherTestLabel1;
    private javax.swing.JLabel teacherTestLabel2;
    private javax.swing.JMenuBar teacherTestMenuBar;
    private javax.swing.JPanel teacherTestPanel1;
    private javax.swing.JButton teacherTestStatusButton1;
    private javax.swing.JButton teacherTestStatusButton2;
    private javax.swing.JDialog testAnswer;
    private javax.swing.JLabel testAnswerBackground;
    private javax.swing.JButton testAnswerButton;
    private javax.swing.JLabel testAnswerLabel;
    private javax.swing.JTextArea testAnswerOutput;
    private javax.swing.JPanel testAnswerPanel;
    private javax.swing.JScrollPane testAnswerScrollPane;
    private javax.swing.JLabel testBackground;
    private javax.swing.JMenuBar testMenuBar;
    private javax.swing.JDialog testQuestion;
    private javax.swing.JDialog testResult;
    // End of variables declaration//GEN-END:variables
}